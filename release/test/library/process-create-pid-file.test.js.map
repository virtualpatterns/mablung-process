{"version":3,"sources":["../../../source/test/library/process-create-pid-file.test.js"],"names":[],"mappings":"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","file":"process-create-pid-file.test.js","sourcesContent":["import FileSystem from 'fs-extra'\nimport { Is } from '@virtualpatterns/mablung-is'\nimport Test from 'ava'\nimport { WorkerClient } from '@virtualpatterns/mablung-worker'\n\nimport { Process, PidFileExistsProcessError } from '../../index.js'\n\nconst Require = __require\n\nTest.before((test) => {\n  test.context.basePath = 'process/pid/create-pid-file'\n})\n\nTest.serial('Process.createPidFile(path) when path exists and is valid', async (test) => {\n\n  let path = `${test.context.basePath}/exists-valid.pid`\n\n  await FileSystem.ensureDir(test.context.basePath)\n  await FileSystem.writeFile(path, process.pid.toString(), { 'encoding': 'utf-8' })\n\n  try {\n    test.throws(() => Process.createPidFile(path), { 'instanceOf': PidFileExistsProcessError })\n  } finally {\n    await FileSystem.remove(path)\n  }\n\n})\n\nTest.serial('Process.createPidFile(path) when path does not exist', async (test) => {\n\n  let path = `${test.context.basePath}/not-exists.pid`\n\n  Process.createPidFile(path)\n\n  try {\n    test.true(await FileSystem.pathExists(path))\n    test.is(parseInt(await FileSystem.readFile(path, { 'encoding': 'utf-8' })), process.pid)\n  } finally {\n    Process.deletePidFile()\n  }\n\n})\n\nTest.serial('Process.createPidFile(path) when path exists and is invalid', async (test) => {\n\n  let path = `${test.context.basePath}/exists-invalid.pid`\n\n  await FileSystem.ensureDir(test.context.basePath)\n  await FileSystem.writeFile(path, '100000', { 'encoding': 'utf-8' })\n\n  Process.createPidFile(path)\n\n  try {\n    test.true(await FileSystem.pathExists(path))\n    test.is(parseInt(await FileSystem.readFile(path, { 'encoding': 'utf-8' })), process.pid)\n  } finally {\n    Process.deletePidFile()\n  }\n\n})\n\nTest.serial('Process.createPidFile(path) when called twice', (test) => {\n\n  let path = `${test.context.basePath}/twice.pid`\n\n  Process.createPidFile(path)\n\n  try {\n    test.throws(() => Process.createPidFile(path), { 'instanceOf': PidFileExistsProcessError })\n  } finally {\n    Process.deletePidFile()\n  }\n\n})\n\nTest.serial('Process.createPidFile(path) when using a worker', async (test) => {\n\n  let path = `${test.context.basePath}/worker.pid`\n  let worker = new WorkerClient(Require.resolve('./worker.js'))\n\n  try {\n\n    await worker.module.createPidFile(path)\n\n    try {\n      test.true(await FileSystem.pathExists(path))\n      test.is(parseInt(await FileSystem.readFile(path, { 'encoding': 'utf-8' })), worker.pid)\n    } finally {\n      await worker.module.deletePidFile()\n    }\n\n  } finally {\n    await worker.exit()\n  }\n\n})\n\nTest.serial('Process.createPidFile(path) on exit', async (test) => {\n\n  let path = `${test.context.basePath}/on-exit.pid`\n  let worker = new WorkerClient(Require.resolve('./worker.js'))\n\n  try {\n    await worker.module.createPidFile(path, { 'handleExit': true, 'handleKillSignal': false })\n  } finally {\n    await worker.exit()\n  }\n\n  test.false(await FileSystem.pathExists(path))\n\n})\n\nTest.serial('Process.createPidFile(path) on uncaught exception', async (test) => {\n\n  let path = `${test.context.basePath}/on-uncaught-exception.pid`\n  let worker = new WorkerClient(Require.resolve('./worker.js'))\n\n  try {\n    await worker.module.createPidFile(path, { 'handleExit': true, 'handleKillSignal': false })\n  } finally {\n    await worker.module.throwUncaughtException()\n    await new Promise((resolve) => setTimeout(resolve, 1000))\n  }\n\n  test.false(await FileSystem.pathExists(path))\n\n})\n\nTest.serial('Process.createPidFile(path) on SIGINT optionally throws OptionNotSupportedProcessError', async (test) => {\n\n  let path = `${test.context.basePath}/on-sigint.pid`\n  let worker = new WorkerClient(Require.resolve('./worker.js'))\n\n  if (Is.windows()) {\n\n    try {\n      await test.throwsAsync(worker.module.createPidFile(path, { 'handleExit': true, 'handleKillSignal': [ 'SIGINT' ] }), { 'instanceOf': Error })\n    } finally {\n      await worker.exit()\n    }\n    \n  } else {\n\n    try {\n      await worker.module.createPidFile(path, { 'handleExit': false, 'handleKillSignal': [ 'SIGINT' ] })\n    } finally {\n      Process.killPidFile(path, 'SIGINT')\n      await new Promise((resolve) => setTimeout(resolve, 1000))\n    }\n\n  }\n\n  test.false(await FileSystem.pathExists(path))\n\n})\n\nTest.serial('Process.createPidFile(path) on SIGTERM optionally throws OptionNotSupportedProcessError', async (test) => {\n\n  let path = `${test.context.basePath}/on-sigterm.pid`\n  let worker = new WorkerClient(Require.resolve('./worker.js'))\n\n  if (Is.windows()) {\n\n    try {\n      await test.throwsAsync(worker.module.createPidFile(path, { 'handleExit': false, 'handleKillSignal': [ 'SIGTERM' ] }), { 'instanceOf': Error })\n    } finally {\n      await worker.exit()\n    }\n    \n  } else {\n\n    try {\n      await worker.module.createPidFile(path, { 'handleExit': false, 'handleKillSignal': [ 'SIGTERM' ] })\n    } finally {\n      Process.killPidFile(path, 'SIGTERM')\n      await new Promise((resolve) => setTimeout(resolve, 1000))\n    }\n\n  }\n\n  test.false(await FileSystem.pathExists(path))\n\n})\n"]}