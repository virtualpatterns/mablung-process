{"version":3,"sources":["../../../source/test/library/process-exists-pid-file.test.js"],"names":[],"mappings":"yDAAA,OAAO,UAAP,MAAuB,UAAvB;AACA,OAAO,IAAP,MAAiB,KAAjB;AACA,SAAS,YAAT,QAA6B,iCAA7B;;AAEA,SAAS,OAAT,QAAwB,gBAAxB;;AAEA,MAAM,OAAO,GANb,cAAc,CAAC,MAAM,CAAC,IAAP,CAAY,GAAb,CAMd;;AAEA,IAAI,CAAC,MAAL,CAAY,CAAC,IAAD,KAAU;AACpB,EAAA,IAAI,CAAC,OAAL,CAAa,QAAb,GAAwB,6BAAxB;AACD,CAFD;;AAIA,IAAI,CAAC,2DAAD,EAA8D,OAAO,IAAP,KAAgB;;AAEhF,MAAI,IAAI,GAAI,GAAE,IAAI,CAAC,OAAL,CAAa,QAAS,mBAApC;;AAEA,QAAM,UAAU,CAAC,SAAX,CAAqB,IAAI,CAAC,OAAL,CAAa,QAAlC,CAAN;AACA,QAAM,UAAU,CAAC,SAAX,CAAqB,IAArB,EAA2B,OAAO,CAAC,GAAR,CAAY,QAAZ,EAA3B,EAAmD,EAAE,YAAY,OAAd,EAAnD,CAAN;;AAEA,MAAI;AACF,IAAA,IAAI,CAAC,IAAL,CAAU,OAAO,CAAC,aAAR,CAAsB,IAAtB,CAAV;AACD,GAFD,SAEU;AACR,UAAM,UAAU,CAAC,MAAX,CAAkB,IAAlB,CAAN;AACD;;AAEF,CAbG,CAAJ;;AAeA,IAAI,CAAC,sDAAD,EAAyD,CAAC,IAAD,KAAU;AACrE,MAAI,IAAI,GAAI,GAAE,IAAI,CAAC,OAAL,CAAa,QAAS,iBAApC;AACA,EAAA,IAAI,CAAC,KAAL,CAAW,OAAO,CAAC,aAAR,CAAsB,IAAtB,CAAX;AACD,CAHG,CAAJ;;AAKA,IAAI,CAAC,6DAAD,EAAgE,OAAO,IAAP,KAAgB;;AAElF,MAAI,IAAI,GAAI,GAAE,IAAI,CAAC,OAAL,CAAa,QAAS,qBAApC;;AAEA,QAAM,UAAU,CAAC,SAAX,CAAqB,IAAI,CAAC,OAAL,CAAa,QAAlC,CAAN;AACA,QAAM,UAAU,CAAC,SAAX,CAAqB,IAArB,EAA2B,QAA3B,EAAqC,EAAE,YAAY,OAAd,EAArC,CAAN;;AAEA,EAAA,IAAI,CAAC,KAAL,CAAW,OAAO,CAAC,aAAR,CAAsB,IAAtB,CAAX;AACA,EAAA,IAAI,CAAC,KAAL,CAAW,MAAM,UAAU,CAAC,UAAX,CAAsB,IAAtB,CAAjB;;AAED,CAVG,CAAJ;;AAYA,IAAI,CAAC,iDAAD,EAAoD,OAAO,IAAP,KAAgB;;AAEtE,MAAI,IAAI,GAAI,GAAE,IAAI,CAAC,OAAL,CAAa,QAAS,aAApC;AACA,MAAI,MAAM,GAAG,IAAI,YAAJ,CAAiB,OAAO,CAAC,OAAR,CAAgB,aAAhB,CAAjB,CAAb;;AAEA,MAAI;;AAEF,UAAM,UAAU,CAAC,SAAX,CAAqB,IAAI,CAAC,OAAL,CAAa,QAAlC,CAAN;AACA,UAAM,UAAU,CAAC,SAAX,CAAqB,IAArB,EAA2B,MAAM,CAAC,GAAP,CAAW,QAAX,EAA3B,EAAkD,EAAE,YAAY,OAAd,EAAlD,CAAN;;AAEA,QAAI;AACF,MAAA,IAAI,CAAC,IAAL,CAAU,MAAM,MAAM,CAAC,MAAP,CAAc,aAAd,CAA4B,IAA5B,CAAhB;AACD,KAFD,SAEU;AACR,YAAM,UAAU,CAAC,MAAX,CAAkB,IAAlB,CAAN;AACD;;AAEF,GAXD,SAWU;AACR,UAAM,MAAM,CAAC,IAAP,EAAN;AACD;;AAEF,CApBG,CAAJ","file":"process-exists-pid-file.test.js","sourcesContent":["import FileSystem from 'fs-extra'\nimport Test from 'ava'\nimport { WorkerClient } from '@virtualpatterns/mablung-worker'\n\nimport { Process } from '../../index.js'\n\nconst Require = __require\n\nTest.before((test) => {\n  test.context.basePath = 'process/pid/exists-pid-file'\n})\n\nTest('Process.existsPidFile(path) when path exists and is valid', async (test) => {\n\n  let path = `${test.context.basePath}/exists-valid.pid`\n\n  await FileSystem.ensureDir(test.context.basePath)\n  await FileSystem.writeFile(path, process.pid.toString(), { 'encoding': 'utf-8' })\n\n  try {\n    test.true(Process.existsPidFile(path))\n  } finally {\n    await FileSystem.unlink(path)\n  }\n\n})\n\nTest('Process.existsPidFile(path) when path does not exist', (test) => {\n  let path = `${test.context.basePath}/not-exists.pid`\n  test.false(Process.existsPidFile(path))\n})\n\nTest('Process.existsPidFile(path) when path exists and is invalid', async (test) => {\n\n  let path = `${test.context.basePath}/exists-invalid.pid`\n\n  await FileSystem.ensureDir(test.context.basePath)\n  await FileSystem.writeFile(path, '100000', { 'encoding': 'utf-8' })\n\n  test.false(Process.existsPidFile(path))\n  test.false(await FileSystem.pathExists(path))\n\n})\n\nTest('Process.existsPidFile(path) when using a worker', async (test) => {\n\n  let path = `${test.context.basePath}/worker.pid`\n  let worker = new WorkerClient(Require.resolve('./worker.js'))\n\n  try {\n\n    await FileSystem.ensureDir(test.context.basePath)\n    await FileSystem.writeFile(path, worker.pid.toString(), { 'encoding': 'utf-8' })\n\n    try {\n      test.true(await worker.module.existsPidFile(path))\n    } finally {\n      await FileSystem.unlink(path)\n    }\n  \n  } finally {\n    await worker.exit()\n  }\n\n})\n"]}