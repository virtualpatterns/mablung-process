{"version":3,"sources":["../../../source/test/library/process-when.test.js"],"names":[],"mappings":"AAAA,OAAO,IAAP,MAAiB,KAAjB;;AAEA,SAAS,OAAT,EAAkB,4BAAlB,QAAsD,gBAAtD;;AAEA,IAAI,CAAC,MAAL,CAAY,CAAC,IAAD,KAAU;AACpB,EAAA,IAAI,CAAC,OAAL,CAAa,eAAb,GAA+B,IAA/B;AACA,EAAA,IAAI,CAAC,OAAL,CAAa,YAAb,GAA4B,IAAI,CAAC,OAAL,CAAa,eAAb,GAA+B,CAA3D;AACD,CAHD;;AAKA,IAAI,CAAC,4FAAD,EAA+F,OAAO,IAAP,KAAgB;AACjH,EAAA,IAAI,CAAC,MAAL,CAAY,MAAM,OAAO,CAAC,IAAR,CAAa,IAAI,CAAC,OAAL,CAAa,eAA1B,EAA2C,IAAI,CAAC,OAAL,CAAa,YAAxD,EAAsE,MAAM,IAA5E,CAAlB;AACD,CAFG,CAAJ;;AAIA,IAAI,CAAC,8FAAD,EAAiG,OAAO,IAAP,KAAgB;AACnH,EAAA,IAAI,CAAC,MAAL,CAAY,MAAM,OAAO,CAAC,IAAR,CAAa,IAAI,CAAC,OAAL,CAAa,eAA1B,EAA2C,IAAI,CAAC,OAAL,CAAa,YAAxD,EAAsE,MAAM;AAC5F,WAAO,OAAO,CAAC,OAAR,CAAgB,IAAhB,CAAP;AACD,GAFiB,CAAlB;AAGD,CAJG,CAAJ;;AAMA,IAAI,CAAC,6FAAD,EAAgG,OAAO,IAAP,KAAgB;AAClH,QAAM,IAAI,CAAC,WAAL,CAAiB,OAAO,CAAC,IAAR,CAAa,IAAI,CAAC,OAAL,CAAa,eAA1B,EAA2C,IAAI,CAAC,OAAL,CAAa,YAAxD,EAAsE,MAAM,KAA5E,CAAjB,EAAqG,EAAE,cAAc,4BAAhB,EAArG,CAAN;AACD,CAFG,CAAJ;;AAIA,IAAI,CAAC,qFAAD,EAAwF,OAAO,IAAP,KAAgB;AAC1G,QAAM,IAAI,CAAC,WAAL,CAAiB,OAAO,CAAC,IAAR,CAAa,IAAI,CAAC,OAAL,CAAa,eAA1B,EAA2C,IAAI,CAAC,OAAL,CAAa,YAAxD,EAAsE,MAAM,CAAE,MAAM,KAAK,EAAX,CAAe,CAA7F,CAAjB,EAAiH,EAAE,cAAc,KAAhB,EAAjH,CAAN;AACD,CAFG,CAAJ;;AAIA,IAAI,CAAC,+FAAD,EAAkG,OAAO,IAAP,KAAgB;AACpH,QAAM,IAAI,CAAC,WAAL,CAAiB,OAAO,CAAC,IAAR,CAAa,IAAI,CAAC,OAAL,CAAa,eAA1B,EAA2C,IAAI,CAAC,OAAL,CAAa,YAAxD,EAAsE,MAAM;AACjG,WAAO,OAAO,CAAC,OAAR,CAAgB,KAAhB,CAAP;AACD,GAFsB,CAAjB,EAEF,EAAE,cAAc,4BAAhB,EAFE,CAAN;AAGD,CAJG,CAAJ;;AAMA,IAAI,CAAC,uFAAD,EAA0F,OAAO,IAAP,KAAgB;AAC5G,QAAM,IAAI,CAAC,WAAL,CAAiB,OAAO,CAAC,IAAR,CAAa,IAAI,CAAC,OAAL,CAAa,eAA1B,EAA2C,IAAI,CAAC,OAAL,CAAa,YAAxD,EAAsE,MAAM;AACjG,WAAO,IAAI,OAAJ,CAAY,MAAM,CAAE,MAAM,KAAK,EAAX,CAAe,CAAnC,CAAP;AACD,GAFsB,CAAjB,EAEF,EAAE,cAAc,KAAhB,EAFE,CAAN;AAGD,CAJG,CAAJ","file":"process-when.test.js","sourcesContent":["import Test from 'ava'\n\nimport { Process, DurationExceededProcessError } from '../../index.js'\n\nTest.before((test) => {\n  test.context.maximumDuration = 1000\n  test.context.pollInterval = test.context.maximumDuration / 4\n})\n\nTest('Process.when(maximumDuration, pollInterval, pollFn) when a synchronous pollFn returns true', async (test) => {\n  test.truthy(await Process.when(test.context.maximumDuration, test.context.pollInterval, () => true))\n})\n\nTest('Process.when(maximumDuration, pollInterval, pollFn) when an asynchronous pollFn returns true', async (test) => {\n  test.truthy(await Process.when(test.context.maximumDuration, test.context.pollInterval, () => {\n    return Promise.resolve(true)\n  }))\n})\n\nTest('Process.when(maximumDuration, pollInterval, pollFn) when a synchronous pollFn returns false', async (test) => {\n  await test.throwsAsync(Process.when(test.context.maximumDuration, test.context.pollInterval, () => false), { 'instanceOf': DurationExceededProcessError })\n})\n\nTest('Process.when(maximumDuration, pollInterval, pollFn) when a synchronous pollFn fails', async (test) => {\n  await test.throwsAsync(Process.when(test.context.maximumDuration, test.context.pollInterval, () => { throw Error() }), { 'instanceOf': Error })\n})\n\nTest('Process.when(maximumDuration, pollInterval, pollFn) when an asynchronous pollFn returns false', async (test) => {\n  await test.throwsAsync(Process.when(test.context.maximumDuration, test.context.pollInterval, () => {\n    return Promise.resolve(false)\n  }), { 'instanceOf': DurationExceededProcessError })\n})\n\nTest('Process.when(maximumDuration, pollInterval, pollFn) when an asynchronous pollFn fails', async (test) => {\n  await test.throwsAsync(Process.when(test.context.maximumDuration, test.context.pollInterval, () => {\n    return new Promise(() => { throw Error() })\n  }), { 'instanceOf': Error })\n})\n"]}