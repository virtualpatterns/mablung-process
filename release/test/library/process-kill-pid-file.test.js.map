{"version":3,"sources":["../../../source/test/library/process-kill-pid-file.test.js"],"names":[],"mappings":"yDAAA,OAAO,UAAP,MAAuB,UAAvB;AACA,OAAO,IAAP,MAAiB,KAAjB;AACA,SAAS,YAAT,QAA6B,iCAA7B;AACA;;AAEA,SAAS,OAAT,EAAkB,4BAAlB,QAAsD,gBAAtD;;AAEA,MAAM,OAAO,GAPb,cAAc,CAAC,MAAM,CAAC,IAAP,CAAY,GAAb,CAOd;;AAEA,IAAI,CAAC,MAAL,CAAY,CAAC,IAAD,KAAU;AACpB,EAAA,IAAI,CAAC,OAAL,CAAa,QAAb,GAAwB,2BAAxB;AACD,CAFD;;AAIA,IAAI,CAAC,yDAAD,EAA4D,OAAO,IAAP,KAAgB;;AAE9E,MAAI,MAAM,GAAG,IAAI,YAAJ,CAAiB,OAAO,CAAC,OAAR,CAAgB,aAAhB,CAAjB,CAAb;AACA,MAAI,IAAI,GAAI,GAAE,IAAI,CAAC,OAAL,CAAa,QAAS,mBAApC;;AAEA,QAAM,MAAM,CAAC,MAAP,CAAc,aAAd,CAA4B,IAA5B,CAAN;;AAEA,EAAA,OAAO,CAAC,WAAR,CAAoB,IAApB;;AAEA,MAAI,eAAe,GAAG,IAAtB;AACA,MAAI,YAAY,GAAG,eAAe,GAAG,CAArC;;AAEA,QAAM,IAAI,CAAC,cAAL,CAAoB,OAAO,CAAC,IAAR,CAAa,eAAb,EAA8B,YAA9B,EAA4C,MAAM,CAAC,OAAO,CAAC,aAAR,CAAsB,IAAtB,CAAnD,CAApB,CAAN;;AAED,CAdG,CAAJ;;AAgBA,IAAI,CAAC,oDAAD,EAAuD,CAAC,IAAD,KAAU;AACnE,MAAI,IAAI,GAAI,GAAE,IAAI,CAAC,OAAL,CAAa,QAAS,iBAApC;AACA,SAAO,IAAI,CAAC,MAAL,CAAY,OAAO,CAAC,WAAR,CAAoB,IAApB,CAAyB,OAAzB,EAAkC,IAAlC,CAAZ,EAAqD,EAAE,cAAc,4BAAhB,EAArD,CAAP;AACD,CAHG,CAAJ;;AAKA,IAAI,CAAC,2DAAD,EAA8D,OAAO,IAAP,KAAgB;;AAEhF,MAAI,IAAI,GAAI,GAAE,IAAI,CAAC,OAAL,CAAa,QAAS,qBAApC;;AAEA,QAAM,UAAU,CAAC,SAAX,CAAqB,IAAI,CAAC,OAAL,CAAa,QAAlC,CAAN;AACA,QAAM,UAAU,CAAC,SAAX,CAAqB,IAArB,EAA2B,QAA3B,EAAqC,EAAE,YAAY,OAAd,EAArC,CAAN;;AAEA,QAAM,IAAI,CAAC,MAAL,CAAY,OAAO,CAAC,WAAR,CAAoB,IAApB,CAAyB,OAAzB,EAAkC,IAAlC,CAAZ,EAAqD,EAAE,cAAc,4BAAhB,EAArD,CAAN;AACA,EAAA,IAAI,CAAC,KAAL,CAAW,OAAO,CAAC,aAAR,CAAsB,IAAtB,CAAX;;AAED,CAVG,CAAJ","file":"process-kill-pid-file.test.js","sourcesContent":["import FileSystem from 'fs-extra'\nimport Test from 'ava'\nimport { WorkerClient } from '@virtualpatterns/mablung-worker'\n// import { LoggedClient } from '@virtualpatterns/mablung-worker/logged-client.js'\n\nimport { Process, PidFileNotExistsProcessError } from '../../index.js'\n\nconst Require = __require\n\nTest.before((test) => {\n  test.context.basePath = 'process/pid/kill-pid-file'\n})\n\nTest('Process.killPidFile(path) when path exists and is valid', async (test) => {\n\n  let worker = new WorkerClient(Require.resolve('./worker.js'))\n  let path = `${test.context.basePath}/exists-valid.pid`\n\n  await worker.module.createPidFile(path)\n\n  Process.killPidFile(path)\n\n  let maximumDuration = 2000\n  let pollInterval = maximumDuration / 8\n\n  await test.notThrowsAsync(Process.when(maximumDuration, pollInterval, () => !Process.existsPidFile(path)))\n\n})\n\nTest('Process.killPidFile(path) when path does not exist', (test) => {\n  let path = `${test.context.basePath}/not-exists.pid`\n  return test.throws(Process.killPidFile.bind(Process, path), { 'instanceOf': PidFileNotExistsProcessError })\n})\n\nTest('Process.killPidFile(path) when path exists and is invalid', async (test) => {\n\n  let path = `${test.context.basePath}/exists-invalid.pid`\n  \n  await FileSystem.ensureDir(test.context.basePath)\n  await FileSystem.writeFile(path, '100000', { 'encoding': 'utf-8' })\n\n  await test.throws(Process.killPidFile.bind(Process, path), { 'instanceOf': PidFileNotExistsProcessError })\n  test.false(Process.existsPidFile(path))\n\n})\n"]}