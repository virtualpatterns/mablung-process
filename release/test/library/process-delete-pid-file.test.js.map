{"version":3,"sources":["../../../source/test/library/process-delete-pid-file.test.js"],"names":[],"mappings":"yDAAA,OAAO,UAAP,MAAuB,UAAvB;AACA,OAAO,IAAP,MAAiB,KAAjB;AACA,SAAS,YAAT,QAA6B,iCAA7B;;AAEA,SAAS,OAAT,EAAkB,4BAAlB,QAAsD,gBAAtD;;AAEA,MAAM,OAAO,GANb,cAAc,CAAC,MAAM,CAAC,IAAP,CAAY,GAAb,CAMd;;AAEA,IAAI,CAAC,MAAL,CAAY,CAAC,IAAD,KAAU;AACpB,EAAA,IAAI,CAAC,OAAL,CAAa,QAAb,GAAwB,6BAAxB;AACD,CAFD;;AAIA,IAAI,CAAC,MAAL,CAAY,uEAAZ,EAAqF,OAAO,IAAP,KAAgB;;AAEnG,MAAI,IAAI,GAAI,GAAE,IAAI,CAAC,OAAL,CAAa,QAAS,YAApC;;AAEA,EAAA,OAAO,CAAC,aAAR,CAAsB,IAAtB;AACA,EAAA,OAAO,CAAC,aAAR;;AAEA,EAAA,IAAI,CAAC,KAAL,CAAW,MAAM,UAAU,CAAC,UAAX,CAAsB,IAAtB,CAAjB;;AAED,CATD;;AAWA,IAAI,CAAC,MAAL,CAAY,kEAAZ,EAAgF,OAAO,IAAP,KAAgB;;AAE9F,MAAI,IAAI,GAAI,GAAE,IAAI,CAAC,OAAL,CAAa,QAAS,aAApC;;AAEA,EAAA,OAAO,CAAC,aAAR,CAAsB,IAAtB;AACA,EAAA,OAAO,CAAC,aAAR;AACA,EAAA,OAAO,CAAC,aAAR,CAAsB,IAAtB;;AAEA,MAAI;AACF,IAAA,IAAI,CAAC,IAAL,CAAU,MAAM,UAAU,CAAC,UAAX,CAAsB,IAAtB,CAAhB;AACD,GAFD,SAEU;AACR,IAAA,OAAO,CAAC,aAAR;AACD;;AAEF,CAdD;;AAgBA,IAAI,CAAC,MAAL,CAAY,2CAAZ,EAAyD,CAAC,IAAD,KAAU;;AAEjE,MAAI,IAAI,GAAI,GAAE,IAAI,CAAC,OAAL,CAAa,QAAS,YAApC;;AAEA,EAAA,OAAO,CAAC,aAAR,CAAsB,IAAtB;AACA,EAAA,OAAO,CAAC,aAAR;;AAEA,EAAA,IAAI,CAAC,MAAL,CAAY,MAAM,OAAO,CAAC,aAAR,EAAlB,EAA2C,EAAE,cAAc,4BAAhB,EAA3C;;AAED,CATD;;AAWA,IAAI,CAAC,MAAL,CAAY,6CAAZ,EAA2D,OAAO,IAAP,KAAgB;;AAEzE,MAAI,IAAI,GAAI,GAAE,IAAI,CAAC,OAAL,CAAa,QAAS,aAApC;AACA,MAAI,MAAM,GAAG,IAAI,YAAJ,CAAiB,OAAO,CAAC,OAAR,CAAgB,aAAhB,CAAjB,CAAb;;AAEA,MAAI;;AAEF,UAAM,MAAM,CAAC,MAAP,CAAc,aAAd,CAA4B,IAA5B,CAAN;AACA,UAAM,MAAM,CAAC,MAAP,CAAc,aAAd,EAAN;;AAEA,IAAA,IAAI,CAAC,KAAL,CAAW,MAAM,UAAU,CAAC,UAAX,CAAsB,IAAtB,CAAjB;;AAED,GAPD,SAOU;AACR,UAAM,MAAM,CAAC,IAAP,EAAN;AACD;;AAEF,CAhBD","file":"process-delete-pid-file.test.js","sourcesContent":["import FileSystem from 'fs-extra'\nimport Test from 'ava'\nimport { WorkerClient } from '@virtualpatterns/mablung-worker'\n\nimport { Process, PidFileNotExistsProcessError } from '../../index.js'\n\nconst Require = __require\n\nTest.before((test) => {\n  test.context.basePath = 'process/pid/delete-pid-file'\n})\n\nTest.serial('Process.deletePidFile() when called after Process.createPidFile(path)', async (test) => {\n\n  let path = `${test.context.basePath}/after.pid`\n\n  Process.createPidFile(path)\n  Process.deletePidFile()\n\n  test.false(await FileSystem.pathExists(path))\n\n})\n\nTest.serial('Process.deletePidFile() when called before another createPidFile', async (test) => {\n\n  let path = `${test.context.basePath}/before.pid`\n\n  Process.createPidFile(path)\n  Process.deletePidFile()\n  Process.createPidFile(path)\n\n  try {\n    test.true(await FileSystem.pathExists(path))\n  } finally {\n    Process.deletePidFile()\n  }\n\n})\n\nTest.serial('Process.deletePidFile() when called twice', (test) => {\n\n  let path = `${test.context.basePath}/twice.pid`\n\n  Process.createPidFile(path)\n  Process.deletePidFile()\n\n  test.throws(() => Process.deletePidFile(), { 'instanceOf': PidFileNotExistsProcessError })\n\n})\n\nTest.serial('Process.deletePidFile() when using a worker', async (test) => {\n\n  let path = `${test.context.basePath}/worker.pid`\n  let worker = new WorkerClient(Require.resolve('./worker.js'))\n\n  try {\n\n    await worker.module.createPidFile(path)\n    await worker.module.deletePidFile()\n\n    test.false(await FileSystem.pathExists(path))\n  \n  } finally {\n    await worker.exit()\n  }\n\n})\n"]}