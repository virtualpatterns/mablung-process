{"version":3,"sources":["../../../source/test/library/process-delete-pid-file.test.js"],"names":["FileSystem","Test","WorkerClient","Process","PidFileNotExistsProcessError","Require","_createRequire","import","meta","url","before","test","context","basePath","serial","path","createPidFile","deletePidFile","false","pathExists","true","throws","worker","resolve","module","exit"],"mappings":"yDAAA,OAAOA,UAAP,MAAuB,UAAvB;AACA,OAAOC,IAAP,MAAiB,KAAjB;AACA,SAASC,YAAT,QAA6B,iCAA7B;;AAEA,SAASC,OAAT,EAAkBC,4BAAlB,QAAsD,gBAAtD;;AAEA,MAAMC,OAAO,GANbC,cAAc,CAACC,MAAM,CAACC,IAAP,CAAYC,GAAb,CAMd;;AAEAR,IAAI,CAACS,MAAL,CAAaC,IAAD,IAAU;AACpBA,EAAAA,IAAI,CAACC,OAAL,CAAaC,QAAb,GAAwB,6BAAxB;AACD,CAFD;;AAIAZ,IAAI,CAACa,MAAL,CAAY,uEAAZ,EAAqF,MAAOH,IAAP,IAAgB;;AAEnG,MAAII,IAAI,GAAI,GAAEJ,IAAI,CAACC,OAAL,CAAaC,QAAS,YAApC;;AAEAV,EAAAA,OAAO,CAACa,aAAR,CAAsBD,IAAtB;AACAZ,EAAAA,OAAO,CAACc,aAAR;;AAEAN,EAAAA,IAAI,CAACO,KAAL,CAAW,MAAMlB,UAAU,CAACmB,UAAX,CAAsBJ,IAAtB,CAAjB;;AAED,CATD;;AAWAd,IAAI,CAACa,MAAL,CAAY,kEAAZ,EAAgF,MAAOH,IAAP,IAAgB;;AAE9F,MAAII,IAAI,GAAI,GAAEJ,IAAI,CAACC,OAAL,CAAaC,QAAS,aAApC;;AAEAV,EAAAA,OAAO,CAACa,aAAR,CAAsBD,IAAtB;AACAZ,EAAAA,OAAO,CAACc,aAAR;AACAd,EAAAA,OAAO,CAACa,aAAR,CAAsBD,IAAtB;;AAEA,MAAI;AACFJ,IAAAA,IAAI,CAACS,IAAL,CAAU,MAAMpB,UAAU,CAACmB,UAAX,CAAsBJ,IAAtB,CAAhB;AACD,GAFD,SAEU;AACRZ,IAAAA,OAAO,CAACc,aAAR;AACD;;AAEF,CAdD;;AAgBAhB,IAAI,CAACa,MAAL,CAAY,2CAAZ,EAA0DH,IAAD,IAAU;;AAEjE,MAAII,IAAI,GAAI,GAAEJ,IAAI,CAACC,OAAL,CAAaC,QAAS,YAApC;;AAEAV,EAAAA,OAAO,CAACa,aAAR,CAAsBD,IAAtB;AACAZ,EAAAA,OAAO,CAACc,aAAR;;AAEAN,EAAAA,IAAI,CAACU,MAAL,CAAY,MAAMlB,OAAO,CAACc,aAAR,EAAlB,EAA2C,EAAE,cAAcb,4BAAhB,EAA3C;;AAED,CATD;;AAWAH,IAAI,CAACa,MAAL,CAAY,6CAAZ,EAA2D,MAAOH,IAAP,IAAgB;;AAEzE,MAAII,IAAI,GAAI,GAAEJ,IAAI,CAACC,OAAL,CAAaC,QAAS,aAApC;AACA,MAAIS,MAAM,GAAG,IAAIpB,YAAJ,CAAiBG,OAAO,CAACkB,OAAR,CAAgB,aAAhB,CAAjB,CAAb;;AAEA,MAAI;;AAEF,UAAMD,MAAM,CAACE,MAAP,CAAcR,aAAd,CAA4BD,IAA5B,CAAN;AACA,UAAMO,MAAM,CAACE,MAAP,CAAcP,aAAd,EAAN;;AAEAN,IAAAA,IAAI,CAACO,KAAL,CAAW,MAAMlB,UAAU,CAACmB,UAAX,CAAsBJ,IAAtB,CAAjB;;AAED,GAPD,SAOU;AACR,UAAMO,MAAM,CAACG,IAAP,EAAN;AACD;;AAEF,CAhBD","sourcesContent":["import FileSystem from 'fs-extra'\nimport Test from 'ava'\nimport { WorkerClient } from '@virtualpatterns/mablung-worker'\n\nimport { Process, PidFileNotExistsProcessError } from '../../index.js'\n\nconst Require = __require\n\nTest.before((test) => {\n  test.context.basePath = 'process/pid/delete-pid-file'\n})\n\nTest.serial('Process.deletePidFile() when called after Process.createPidFile(path)', async (test) => {\n\n  let path = `${test.context.basePath}/after.pid`\n\n  Process.createPidFile(path)\n  Process.deletePidFile()\n\n  test.false(await FileSystem.pathExists(path))\n\n})\n\nTest.serial('Process.deletePidFile() when called before another createPidFile', async (test) => {\n\n  let path = `${test.context.basePath}/before.pid`\n\n  Process.createPidFile(path)\n  Process.deletePidFile()\n  Process.createPidFile(path)\n\n  try {\n    test.true(await FileSystem.pathExists(path))\n  } finally {\n    Process.deletePidFile()\n  }\n\n})\n\nTest.serial('Process.deletePidFile() when called twice', (test) => {\n\n  let path = `${test.context.basePath}/twice.pid`\n\n  Process.createPidFile(path)\n  Process.deletePidFile()\n\n  test.throws(() => Process.deletePidFile(), { 'instanceOf': PidFileNotExistsProcessError })\n\n})\n\nTest.serial('Process.deletePidFile() when using a worker', async (test) => {\n\n  let path = `${test.context.basePath}/worker.pid`\n  let worker = new WorkerClient(Require.resolve('./worker.js'))\n\n  try {\n\n    await worker.module.createPidFile(path)\n    await worker.module.deletePidFile()\n\n    test.false(await FileSystem.pathExists(path))\n  \n  } finally {\n    await worker.exit()\n  }\n\n})\n"],"file":"process-delete-pid-file.test.js"}