{"version":3,"sources":["../../source/library/process.js"],"names":[],"mappings":"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","file":"process.js","sourcesContent":["import FileSystem from 'fs-extra'\nimport { Is } from '@virtualpatterns/mablung-is'\nimport Path from 'path'\n\nimport { DurationExceededProcessError } from './error/duration-exceeded-process-error.js'\nimport { OptionNotSupportedProcessError } from './error/option-not-supported-process-error.js'\nimport { PidFileExistsProcessError } from './error/pid-file-exists-process-error.js'\nimport { PidFileNotExistsProcessError } from './error/pid-file-not-exists-process-error.js'\n\n// * ensureDir on create, remove from TextDecoderStream\n\nconst BaseProcess = process\n\nclass Process {\n\n  static wait(duration) {\n    return new Promise((resolve) => {\n      setTimeout(resolve, duration)\n    })\n  }\n\n  static when(maximumDuration, pollInterval, pollFn) {\n\n    return new Promise((resolve, reject) => {\n  \n      let waitLoop = function (start) {\n  \n        let duration = new Date() - start\n        let value = null\n        \n        try {\n  \n          value = pollFn()\n  \n          if (value instanceof Promise) {\n  \n            value\n              .then((value) => {\n    \n                if (!value && duration < maximumDuration) {\n                  setTimeout(() => waitLoop(start), pollInterval)\n                } else if (!value && duration >= maximumDuration) {\n                  reject(new DurationExceededProcessError(duration, maximumDuration))\n                } else {\n                  resolve(value)\n                }\n    \n              })\n              .catch((error) => {\n    \n                if (duration < maximumDuration) {\n                  setTimeout(() => waitLoop(start), pollInterval)\n                } else if (duration >= maximumDuration) {\n                  reject(error)\n                }\n    \n              })\n    \n          } else {\n    \n            if (!value && duration < maximumDuration) {\n              setTimeout(() => waitLoop(start), pollInterval)\n            } else if (!value && duration >= maximumDuration) {\n              reject(new DurationExceededProcessError(duration, maximumDuration))\n            } else {\n              resolve(value)\n            }\n    \n          }\n    \n        } catch (error) {\n  \n          if (duration < maximumDuration) {\n            setTimeout(() => waitLoop(start), pollInterval)\n          } else if (duration >= maximumDuration) {\n            reject(error)\n          }\n  \n        }\n  \n      }\n  \n      waitLoop(new Date())\n  \n    })\n  \n  }\n    \n  static existsPidFile(path) {\n\n    if (FileSystem.pathExistsSync(path)) {\n\n      try {\n        this.kill(FileSystem.readFileSync(path, { 'encoding': 'utf-8' }), 0)\n        return true\n      } catch (error) {\n        FileSystem.removeSync(path)\n        return false\n      }\n\n    } else {\n      return false\n    }\n  \n  }\n  \n  static createPidFile(path, { handleExit = true, handleKillSignal = Is.windows() ? false : [ 'SIGINT', 'SIGTERM' ] } = {}) {\n\n    if (this._pidPath) {\n      throw new PidFileExistsProcessError(this._pidPath)\n    } else if (this.existsPidFile(path)) {\n      throw new PidFileExistsProcessError(path)\n    } else {\n  \n      FileSystem.ensureDirSync(Path.dirname(path))\n      FileSystem.writeFileSync(path, this.pid.toString(), { 'encoding': 'utf-8' })\n\n      try {\n\n        this._attach({ handleExit, handleKillSignal })\n    \n        this._pidPath = path\n        this._pidOption = { handleExit, handleKillSignal }\n  \n      } catch (error) {\n        FileSystem.removeSync(path)\n        throw error\n      }\n\n    }\n  \n  }\n\n  static _attach({ handleExit, handleKillSignal }) {\n\n    try {\n\n      if (handleExit) {\n\n        this.on('exit', this.__onExit = (code) => {\n          // console.log(`Process.on('exit', Process.__onExit = (${code}) => { ... })`)\n          \n          try {\n            this._onExit(code)\n          /* c8 ignore next 3 */\n          } catch (error) {\n            console.error(error)\n          }\n    \n        })\n    \n      }\n  \n      if (handleKillSignal) {\n  \n        if (Is.windows()) {\n          throw new OptionNotSupportedProcessError('handleKillSignal')\n        } else {\n        \n          handleKillSignal.forEach((signal) => {\n            this.on(signal, this[`__on${signal}`] = () => {\n              // console.log(`Process.on('${signal}', Process.__on${signal} = () => { ... })`)\n            \n              try {\n                this._onSignal(signal)\n              /* c8 ignore next 3 */\n              } catch (error) {\n                console.error(error)\n              }\n      \n            })\n          })\n    \n        }\n    \n      }\n\n    } catch (error) {\n      this._detach({ handleExit, handleKillSignal })\n      throw error\n    }\n\n  }\n\n  static _onExit( /* code */ ) {\n    this.deletePidFile()\n  }\n\n  static _onSignal(signal) {\n\n    this.deletePidFile()\n\n    let count = this.listenerCount(signal)\n\n    /* c8 ignore next 5 */\n    if (count <= 0) {\n      this.exit()\n    } else {\n      console.log(`Process.listenerCount('${signal}') returned ${count}`)\n    }\n\n  }\n\n  static _detach({ handleExit, handleKillSignal }) {\n\n    if (handleKillSignal) {\n\n      handleKillSignal.forEach((signal) => {\n        if (this[`__on${signal}`]) {\n          this.off(signal, this[`__on${signal}`])\n          delete this[`__on${signal}`]\n        }\n      })\n  \n    }\n\n    if (handleExit) {\n\n      if (this.__onExit) {\n        this.off('exit', this.__onExit)\n        delete this.__onExit\n      }\n  \n    }\n\n  }\n\n  static deletePidFile() {\n\n    let path = this._pidPath\n    let option = this._pidOption\n  \n    if (this.existsPidFile(path)) {\n  \n      FileSystem.removeSync(path)\n  \n      this._detach(option)\n\n      delete Process._pidPath\n      delete Process._pidOption\n  \n    }\n    else {\n      throw new PidFileNotExistsProcessError(path)\n    }\n  \n  }\n\n  static signalPidFile(path, signal) {\n\n    if (this.existsPidFile(path)) {\n      this.kill(FileSystem.readFileSync(path, { 'encoding': 'utf-8' }), signal)\n    } else {\n      throw new PidFileNotExistsProcessError(path)\n    }\n  \n  }\n  \n  static killPidFile(path, killSignal = 'SIGINT') {\n    return this.signalPidFile(path, killSignal)\n  }\n  \n}\n\nObject.setPrototypeOf(Process, BaseProcess)\n\nexport { Process }\n"]}