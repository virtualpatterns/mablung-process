{"version":3,"sources":["../../../source/test/library/process-create-pid-file.test.js"],"names":["FileSystem","Is","Test","WorkerClient","Process","PidFileExistsProcessError","Require","_createRequire","import","meta","url","before","test","context","basePath","ensureDir","serial","path","writeFile","process","pid","toString","throws","createPidFile","remove","true","pathExists","is","parseInt","readFile","deletePidFile","worker","resolve","module","exit","false","throwUncaughtException","Promise","setTimeout","windows","throwsAsync","Error","killPidFile"],"mappings":"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","sourcesContent":["import FileSystem from 'fs-extra'\nimport { Is } from '@virtualpatterns/mablung-is'\nimport Test from 'ava'\nimport { WorkerClient } from '@virtualpatterns/mablung-worker'\n\nimport { Process, PidFileExistsProcessError } from '../../index.js'\n\nconst Require = __require\n\nTest.before(async (test) => {\n  test.context.basePath = 'process/pid/create-pid-file'\n  await FileSystem.ensureDir(test.context.basePath)\n})\n\nTest.serial('Process.createPidFile(path) when path exists and is valid', async (test) => {\n\n  let path = `${test.context.basePath}/exists-valid.pid`\n\n  await FileSystem.writeFile(path, process.pid.toString(), { 'encoding': 'utf-8' })\n\n  try {\n    test.throws(() => Process.createPidFile(path), { 'instanceOf': PidFileExistsProcessError })\n  } finally {\n    await FileSystem.remove(path)\n  }\n\n})\n\nTest.serial('Process.createPidFile(path) when path does not exist', async (test) => {\n\n  let path = `${test.context.basePath}/not-exists.pid`\n\n  Process.createPidFile(path)\n\n  try {\n    test.true(await FileSystem.pathExists(path))\n    test.is(parseInt(await FileSystem.readFile(path, { 'encoding': 'utf-8' })), process.pid)\n  } finally {\n    Process.deletePidFile()\n  }\n\n})\n\nTest.serial('Process.createPidFile(path) when path exists and is invalid', async (test) => {\n\n  let path = `${test.context.basePath}/exists-invalid.pid`\n\n  await FileSystem.writeFile(path, '100000', { 'encoding': 'utf-8' })\n\n  Process.createPidFile(path)\n\n  try {\n    test.true(await FileSystem.pathExists(path))\n    test.is(parseInt(await FileSystem.readFile(path, { 'encoding': 'utf-8' })), process.pid)\n  } finally {\n    Process.deletePidFile()\n  }\n\n})\n\nTest.serial('Process.createPidFile(path) when called twice', (test) => {\n\n  let path = `${test.context.basePath}/twice.pid`\n\n  Process.createPidFile(path)\n\n  try {\n    test.throws(() => Process.createPidFile(path), { 'instanceOf': PidFileExistsProcessError })\n  } finally {\n    Process.deletePidFile()\n  }\n\n})\n\nTest.serial('Process.createPidFile(path) when using a worker', async (test) => {\n\n  let path = `${test.context.basePath}/worker.pid`\n  let worker = new WorkerClient(Require.resolve('./worker.js'))\n\n  try {\n\n    await worker.module.createPidFile(path)\n\n    try {\n      test.true(await FileSystem.pathExists(path))\n      test.is(parseInt(await FileSystem.readFile(path, { 'encoding': 'utf-8' })), worker.pid)\n    } finally {\n      await worker.module.deletePidFile()\n    }\n\n  } finally {\n    await worker.exit()\n  }\n\n})\n\nTest.serial('Process.createPidFile(path) on exit', async (test) => {\n\n  let path = `${test.context.basePath}/on-exit.pid`\n  let worker = new WorkerClient(Require.resolve('./worker.js'))\n\n  try {\n    await worker.module.createPidFile(path, { 'handleExit': true, 'handleKillSignal': false })\n  } finally {\n    await worker.exit()\n  }\n\n  test.false(await FileSystem.pathExists(path))\n\n})\n\nTest.serial('Process.createPidFile(path) on uncaught exception', async (test) => {\n\n  let path = `${test.context.basePath}/on-uncaught-exception.pid`\n  let worker = new WorkerClient(Require.resolve('./worker.js'))\n\n  try {\n    await worker.module.createPidFile(path, { 'handleExit': true, 'handleKillSignal': false })\n  } finally {\n    await worker.module.throwUncaughtException()\n    await new Promise((resolve) => setTimeout(resolve, 1000))\n  }\n\n  test.false(await FileSystem.pathExists(path))\n\n})\n\nTest.serial('Process.createPidFile(path) on SIGINT optionally throws OptionNotSupportedProcessError', async (test) => {\n\n  let path = `${test.context.basePath}/on-sigint.pid`\n  let worker = new WorkerClient(Require.resolve('./worker.js'))\n\n  if (Is.windows()) {\n\n    try {\n      await test.throwsAsync(worker.module.createPidFile(path, { 'handleExit': true, 'handleKillSignal': [ 'SIGINT' ] }), { 'instanceOf': Error })\n    } finally {\n      await worker.exit()\n    }\n    \n  } else {\n\n    try {\n      await worker.module.createPidFile(path, { 'handleExit': false, 'handleKillSignal': [ 'SIGINT' ] })\n    } finally {\n      Process.killPidFile(path, 'SIGINT')\n      await new Promise((resolve) => setTimeout(resolve, 1000))\n    }\n\n  }\n\n  test.false(await FileSystem.pathExists(path))\n\n})\n\nTest.serial('Process.createPidFile(path) on SIGTERM optionally throws OptionNotSupportedProcessError', async (test) => {\n\n  let path = `${test.context.basePath}/on-sigterm.pid`\n  let worker = new WorkerClient(Require.resolve('./worker.js'))\n\n  if (Is.windows()) {\n\n    try {\n      await test.throwsAsync(worker.module.createPidFile(path, { 'handleExit': false, 'handleKillSignal': [ 'SIGTERM' ] }), { 'instanceOf': Error })\n    } finally {\n      await worker.exit()\n    }\n    \n  } else {\n\n    try {\n      await worker.module.createPidFile(path, { 'handleExit': false, 'handleKillSignal': [ 'SIGTERM' ] })\n    } finally {\n      Process.killPidFile(path, 'SIGTERM')\n      await new Promise((resolve) => setTimeout(resolve, 1000))\n    }\n\n  }\n\n  test.false(await FileSystem.pathExists(path))\n\n})\n"],"file":"process-create-pid-file.test.js"}