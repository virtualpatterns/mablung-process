{"version":3,"sources":["../../../source/test/library/process-delete-pid-file.test.js"],"names":["FileSystem","Test","WorkerClient","Process","ProcessArgumentError","Require","_createRequire","import","meta","url","before","test","context","basePath","ensureDir","serial","path","createPidFile","deletePidFile","throwsAsync","access","bind","F_OK","notThrowsAsync","throws","worker","resolve","module","exit"],"mappings":";AAAA,OAAOA,UAAP,MAAuB,UAAvB;AACA,OAAOC,IAAP,MAAiB,KAAjB;AACA,SAASC,YAAT,QAA6B,iCAA7B;AAEA,SAASC,OAAT,EAAkBC,oBAAlB,QAA8C,gBAA9C;;AAEA,MAAMC,OAAO,GANbC,cAAc,CAACC,MAAM,CAACC,IAAP,CAAYC,GAAb,CAMd;;AAEAR,IAAI,CAACS,MAAL,CAAY,MAAOC,IAAP,IAAgB;AAC1BA,EAAAA,IAAI,CAACC,OAAL,CAAaC,QAAb,GAAwB,6BAAxB;AACA,QAAMb,UAAU,CAACc,SAAX,CAAqBH,IAAI,CAACC,OAAL,CAAaC,QAAlC,CAAN;AACD,CAHD;AAKAZ,IAAI,CAACc,MAAL,CAAY,uEAAZ,EAAqF,MAAOJ,IAAP,IAAgB;AAEnG,MAAIK,IAAI,GAAI,GAAEL,IAAI,CAACC,OAAL,CAAaC,QAAS,YAApC;AAEAV,EAAAA,OAAO,CAACc,aAAR,CAAsBD,IAAtB;AACAb,EAAAA,OAAO,CAACe,aAAR;AAEA,QAAMP,IAAI,CAACQ,WAAL,CAAiBnB,UAAU,CAACoB,MAAX,CAAkBC,IAAlB,CAAuBrB,UAAvB,EAAmCgB,IAAnC,EAAyChB,UAAU,CAACsB,IAApD,CAAjB,EAA4E;AAAE,YAAQ;AAAV,GAA5E,CAAN;AAED,CATD;AAWArB,IAAI,CAACc,MAAL,CAAY,kEAAZ,EAAgF,MAAOJ,IAAP,IAAgB;AAE9F,MAAIK,IAAI,GAAI,GAAEL,IAAI,CAACC,OAAL,CAAaC,QAAS,aAApC;AAEAV,EAAAA,OAAO,CAACc,aAAR,CAAsBD,IAAtB;AACAb,EAAAA,OAAO,CAACe,aAAR;AACAf,EAAAA,OAAO,CAACc,aAAR,CAAsBD,IAAtB;;AAEA,MAAI;AACF,UAAML,IAAI,CAACY,cAAL,CAAoBvB,UAAU,CAACoB,MAAX,CAAkBC,IAAlB,CAAuBrB,UAAvB,EAAmCgB,IAAnC,EAAyChB,UAAU,CAACsB,IAApD,CAApB,CAAN;AACD,GAFD,SAEU;AACRnB,IAAAA,OAAO,CAACe,aAAR;AACD;AAEF,CAdD;AAgBAjB,IAAI,CAACc,MAAL,CAAY,2CAAZ,EAA0DJ,IAAD,IAAU;AAEjE,MAAIK,IAAI,GAAI,GAAEL,IAAI,CAACC,OAAL,CAAaC,QAAS,YAApC;AAEAV,EAAAA,OAAO,CAACc,aAAR,CAAsBD,IAAtB;AACAb,EAAAA,OAAO,CAACe,aAAR;AAEAP,EAAAA,IAAI,CAACa,MAAL,CAAYrB,OAAO,CAACe,aAAR,CAAsBG,IAAtB,CAA2BlB,OAA3B,CAAZ,EAAiD;AAAE,kBAAcC;AAAhB,GAAjD;AAED,CATD;AAWAH,IAAI,CAACc,MAAL,CAAY,6CAAZ,EAA2D,MAAOJ,IAAP,IAAgB;AAEzE,MAAIK,IAAI,GAAI,GAAEL,IAAI,CAACC,OAAL,CAAaC,QAAS,aAApC;AACA,MAAIY,MAAM,GAAG,IAAIvB,YAAJ,CAAiBG,OAAO,CAACqB,OAAR,CAAgB,aAAhB,CAAjB,CAAb;;AAEA,MAAI;AAEF,UAAMD,MAAM,CAACE,MAAP,CAAcV,aAAd,CAA4BD,IAA5B,CAAN;AACA,UAAMS,MAAM,CAACE,MAAP,CAAcT,aAAd,EAAN;AAEA,UAAMP,IAAI,CAACQ,WAAL,CAAiBnB,UAAU,CAACoB,MAAX,CAAkBC,IAAlB,CAAuBrB,UAAvB,EAAmCgB,IAAnC,EAAyChB,UAAU,CAACsB,IAApD,CAAjB,EAA4E;AAAE,cAAQ;AAAV,KAA5E,CAAN;AAED,GAPD,SAOU;AACR,UAAMG,MAAM,CAACG,IAAP,EAAN;AACD;AAEF,CAhBD","sourcesContent":["import FileSystem from 'fs-extra'\nimport Test from 'ava'\nimport { WorkerClient } from '@virtualpatterns/mablung-worker'\n\nimport { Process, ProcessArgumentError } from '../../index.js'\n\nconst Require = __require\n\nTest.before(async (test) => {\n  test.context.basePath = 'process/pid/delete-pid-file'\n  await FileSystem.ensureDir(test.context.basePath)\n})\n\nTest.serial('Process.deletePidFile() when called after Process.createPidFile(path)', async (test) => {\n\n  let path = `${test.context.basePath}/after.pid`\n\n  Process.createPidFile(path)\n  Process.deletePidFile()\n\n  await test.throwsAsync(FileSystem.access.bind(FileSystem, path, FileSystem.F_OK), { 'code': 'ENOENT' })\n\n})\n\nTest.serial('Process.deletePidFile() when called before another createPidFile', async (test) => {\n\n  let path = `${test.context.basePath}/before.pid`\n\n  Process.createPidFile(path)\n  Process.deletePidFile()\n  Process.createPidFile(path)\n\n  try {\n    await test.notThrowsAsync(FileSystem.access.bind(FileSystem, path, FileSystem.F_OK))\n  } finally {\n    Process.deletePidFile()\n  }\n\n})\n\nTest.serial('Process.deletePidFile() when called twice', (test) => {\n\n  let path = `${test.context.basePath}/twice.pid`\n\n  Process.createPidFile(path)\n  Process.deletePidFile()\n\n  test.throws(Process.deletePidFile.bind(Process), { 'instanceOf': ProcessArgumentError })\n\n})\n\nTest.serial('Process.deletePidFile() when using a worker', async (test) => {\n\n  let path = `${test.context.basePath}/worker.pid`\n  let worker = new WorkerClient(Require.resolve('./worker.js'))\n\n  try {\n\n    await worker.module.createPidFile(path)\n    await worker.module.deletePidFile()\n\n    await test.throwsAsync(FileSystem.access.bind(FileSystem, path, FileSystem.F_OK), { 'code': 'ENOENT' })\n  \n  } finally {\n    await worker.exit()\n  }\n\n})\n"],"file":"process-delete-pid-file.test.js"}