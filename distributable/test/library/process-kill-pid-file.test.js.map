{"version":3,"sources":["../../../source/test/library/process-kill-pid-file.test.js"],"names":["FileSystem","Test","WorkerClient","Process","ProcessArgumentError","Require","_createRequire","import","meta","url","before","test","context","basePath","ensureDir","worker","resolve","path","module","createPidFile","killPidFile","maximumDuration","pollInterval","notThrowsAsync","when","existsPidFile","throws","bind","writeFile","false"],"mappings":";AAAA,OAAOA,UAAP,MAAuB,UAAvB;AACA,OAAOC,IAAP,MAAiB,KAAjB;AACA,SAASC,YAAT,QAA6B,iCAA7B,C,CACA;;AAEA,SAASC,OAAT,EAAkBC,oBAAlB,QAA8C,gBAA9C;;AAEA,MAAMC,OAAO,GAPbC,cAAc,CAACC,MAAM,CAACC,IAAP,CAAYC,GAAb,CAOd;;AAEAR,IAAI,CAACS,MAAL,CAAY,MAAOC,IAAP,IAAgB;AAC1BA,EAAAA,IAAI,CAACC,OAAL,CAAaC,QAAb,GAAwB,2BAAxB;AACA,QAAMb,UAAU,CAACc,SAAX,CAAqBH,IAAI,CAACC,OAAL,CAAaC,QAAlC,CAAN;AACD,CAHD;AAKAZ,IAAI,CAAC,yDAAD,EAA4D,MAAOU,IAAP,IAAgB;AAE9E,MAAII,MAAM,GAAG,IAAIb,YAAJ,CAAiBG,OAAO,CAACW,OAAR,CAAgB,aAAhB,CAAjB,CAAb;AACA,MAAIC,IAAI,GAAI,GAAEN,IAAI,CAACC,OAAL,CAAaC,QAAS,mBAApC;AAEA,QAAME,MAAM,CAACG,MAAP,CAAcC,aAAd,CAA4BF,IAA5B,CAAN;AAEAd,EAAAA,OAAO,CAACiB,WAAR,CAAoBH,IAApB;AAEA,MAAII,eAAe,GAAG,IAAtB;AACA,MAAIC,YAAY,GAAGD,eAAe,GAAG,CAArC;AAEA,QAAMV,IAAI,CAACY,cAAL,CAAoBpB,OAAO,CAACqB,IAAR,CAAaH,eAAb,EAA8BC,YAA9B,EAA4C,MAAM,CAACnB,OAAO,CAACsB,aAAR,CAAsBR,IAAtB,CAAnD,CAApB,CAAN;AAED,CAdG,CAAJ;AAgBAhB,IAAI,CAAC,oDAAD,EAAwDU,IAAD,IAAU;AACnE,MAAIM,IAAI,GAAI,GAAEN,IAAI,CAACC,OAAL,CAAaC,QAAS,iBAApC;AACA,SAAOF,IAAI,CAACe,MAAL,CAAYvB,OAAO,CAACiB,WAAR,CAAoBO,IAApB,CAAyBxB,OAAzB,EAAkCc,IAAlC,CAAZ,EAAqD;AAAE,kBAAcb;AAAhB,GAArD,CAAP;AACD,CAHG,CAAJ;AAKAH,IAAI,CAAC,2DAAD,EAA8D,MAAOU,IAAP,IAAgB;AAEhF,MAAIM,IAAI,GAAI,GAAEN,IAAI,CAACC,OAAL,CAAaC,QAAS,qBAApC;AACA,QAAMb,UAAU,CAAC4B,SAAX,CAAqBX,IAArB,EAA2B,QAA3B,EAAqC;AAAE,gBAAY;AAAd,GAArC,CAAN;AAEA,QAAMN,IAAI,CAACe,MAAL,CAAYvB,OAAO,CAACiB,WAAR,CAAoBO,IAApB,CAAyBxB,OAAzB,EAAkCc,IAAlC,CAAZ,EAAqD;AAAE,kBAAcb;AAAhB,GAArD,CAAN;AACAO,EAAAA,IAAI,CAACkB,KAAL,CAAW1B,OAAO,CAACsB,aAAR,CAAsBR,IAAtB,CAAX;AAED,CARG,CAAJ","sourcesContent":["import FileSystem from 'fs-extra'\nimport Test from 'ava'\nimport { WorkerClient } from '@virtualpatterns/mablung-worker'\n// import { LoggedClient } from '@virtualpatterns/mablung-worker/logged-client.js'\n\nimport { Process, ProcessArgumentError } from '../../index.js'\n\nconst Require = __require\n\nTest.before(async (test) => {\n  test.context.basePath = 'process/pid/kill-pid-file'\n  await FileSystem.ensureDir(test.context.basePath)\n})\n\nTest('Process.killPidFile(path) when path exists and is valid', async (test) => {\n\n  let worker = new WorkerClient(Require.resolve('./worker.js'))\n  let path = `${test.context.basePath}/exists-valid.pid`\n\n  await worker.module.createPidFile(path)\n\n  Process.killPidFile(path)\n\n  let maximumDuration = 2000\n  let pollInterval = maximumDuration / 8\n\n  await test.notThrowsAsync(Process.when(maximumDuration, pollInterval, () => !Process.existsPidFile(path)))\n\n})\n\nTest('Process.killPidFile(path) when path does not exist', (test) => {\n  let path = `${test.context.basePath}/not-exists.pid`\n  return test.throws(Process.killPidFile.bind(Process, path), { 'instanceOf': ProcessArgumentError })\n})\n\nTest('Process.killPidFile(path) when path exists and is invalid', async (test) => {\n\n  let path = `${test.context.basePath}/exists-invalid.pid`\n  await FileSystem.writeFile(path, '100000', { 'encoding': 'utf-8' })\n\n  await test.throws(Process.killPidFile.bind(Process, path), { 'instanceOf': ProcessArgumentError })\n  test.false(Process.existsPidFile(path))\n\n})\n"],"file":"process-kill-pid-file.test.js"}