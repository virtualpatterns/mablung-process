{"version":3,"sources":["../../../source/test/library/process-kill-pid-file.test.js"],"names":["FileSystem","Test","WorkerClient","Process","PidFileNotExistsProcessError","Require","_createRequire","import","meta","url","before","test","context","basePath","worker","resolve","path","module","createPidFile","killPidFile","maximumDuration","pollInterval","notThrowsAsync","when","existsPidFile","throws","bind","ensureDir","writeFile","false"],"mappings":"yDAAA,OAAOA,UAAP,MAAuB,UAAvB;AACA,OAAOC,IAAP,MAAiB,KAAjB;AACA,SAASC,YAAT,QAA6B,iCAA7B;AACA;;AAEA,SAASC,OAAT,EAAkBC,4BAAlB,QAAsD,gBAAtD;;AAEA,MAAMC,OAAO,GAPbC,cAAc,CAACC,MAAM,CAACC,IAAP,CAAYC,GAAb,CAOd;;AAEAR,IAAI,CAACS,MAAL,CAAaC,IAAD,IAAU;AACpBA,EAAAA,IAAI,CAACC,OAAL,CAAaC,QAAb,GAAwB,2BAAxB;AACD,CAFD;;AAIAZ,IAAI,CAAC,yDAAD,EAA4D,MAAOU,IAAP,IAAgB;;AAE9E,MAAIG,MAAM,GAAG,IAAIZ,YAAJ,CAAiBG,OAAO,CAACU,OAAR,CAAgB,aAAhB,CAAjB,CAAb;AACA,MAAIC,IAAI,GAAI,GAAEL,IAAI,CAACC,OAAL,CAAaC,QAAS,mBAApC;;AAEA,QAAMC,MAAM,CAACG,MAAP,CAAcC,aAAd,CAA4BF,IAA5B,CAAN;;AAEAb,EAAAA,OAAO,CAACgB,WAAR,CAAoBH,IAApB;;AAEA,MAAII,eAAe,GAAG,IAAtB;AACA,MAAIC,YAAY,GAAGD,eAAe,GAAG,CAArC;;AAEA,QAAMT,IAAI,CAACW,cAAL,CAAoBnB,OAAO,CAACoB,IAAR,CAAaH,eAAb,EAA8BC,YAA9B,EAA4C,MAAM,CAAClB,OAAO,CAACqB,aAAR,CAAsBR,IAAtB,CAAnD,CAApB,CAAN;;AAED,CAdG,CAAJ;;AAgBAf,IAAI,CAAC,oDAAD,EAAwDU,IAAD,IAAU;AACnE,MAAIK,IAAI,GAAI,GAAEL,IAAI,CAACC,OAAL,CAAaC,QAAS,iBAApC;AACA,SAAOF,IAAI,CAACc,MAAL,CAAYtB,OAAO,CAACgB,WAAR,CAAoBO,IAApB,CAAyBvB,OAAzB,EAAkCa,IAAlC,CAAZ,EAAqD,EAAE,cAAcZ,4BAAhB,EAArD,CAAP;AACD,CAHG,CAAJ;;AAKAH,IAAI,CAAC,2DAAD,EAA8D,MAAOU,IAAP,IAAgB;;AAEhF,MAAIK,IAAI,GAAI,GAAEL,IAAI,CAACC,OAAL,CAAaC,QAAS,qBAApC;;AAEA,QAAMb,UAAU,CAAC2B,SAAX,CAAqBhB,IAAI,CAACC,OAAL,CAAaC,QAAlC,CAAN;AACA,QAAMb,UAAU,CAAC4B,SAAX,CAAqBZ,IAArB,EAA2B,QAA3B,EAAqC,EAAE,YAAY,OAAd,EAArC,CAAN;;AAEA,QAAML,IAAI,CAACc,MAAL,CAAYtB,OAAO,CAACgB,WAAR,CAAoBO,IAApB,CAAyBvB,OAAzB,EAAkCa,IAAlC,CAAZ,EAAqD,EAAE,cAAcZ,4BAAhB,EAArD,CAAN;AACAO,EAAAA,IAAI,CAACkB,KAAL,CAAW1B,OAAO,CAACqB,aAAR,CAAsBR,IAAtB,CAAX;;AAED,CAVG,CAAJ","sourcesContent":["import FileSystem from 'fs-extra'\nimport Test from 'ava'\nimport { WorkerClient } from '@virtualpatterns/mablung-worker'\n// import { LoggedClient } from '@virtualpatterns/mablung-worker/logged-client.js'\n\nimport { Process, PidFileNotExistsProcessError } from '../../index.js'\n\nconst Require = __require\n\nTest.before((test) => {\n  test.context.basePath = 'process/pid/kill-pid-file'\n})\n\nTest('Process.killPidFile(path) when path exists and is valid', async (test) => {\n\n  let worker = new WorkerClient(Require.resolve('./worker.js'))\n  let path = `${test.context.basePath}/exists-valid.pid`\n\n  await worker.module.createPidFile(path)\n\n  Process.killPidFile(path)\n\n  let maximumDuration = 2000\n  let pollInterval = maximumDuration / 8\n\n  await test.notThrowsAsync(Process.when(maximumDuration, pollInterval, () => !Process.existsPidFile(path)))\n\n})\n\nTest('Process.killPidFile(path) when path does not exist', (test) => {\n  let path = `${test.context.basePath}/not-exists.pid`\n  return test.throws(Process.killPidFile.bind(Process, path), { 'instanceOf': PidFileNotExistsProcessError })\n})\n\nTest('Process.killPidFile(path) when path exists and is invalid', async (test) => {\n\n  let path = `${test.context.basePath}/exists-invalid.pid`\n  \n  await FileSystem.ensureDir(test.context.basePath)\n  await FileSystem.writeFile(path, '100000', { 'encoding': 'utf-8' })\n\n  await test.throws(Process.killPidFile.bind(Process, path), { 'instanceOf': PidFileNotExistsProcessError })\n  test.false(Process.existsPidFile(path))\n\n})\n"],"file":"process-kill-pid-file.test.js"}