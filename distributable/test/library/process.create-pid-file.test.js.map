{"version":3,"sources":["../../../source/test/library/process.create-pid-file.test.js"],"names":["FileSystem","Test","WorkerClient","Process","ProcessArgumentError","Require","_createRequire","import","meta","url","before","test","context","basePath","ensureDir","serial","path","writeFile","process","pid","throws","createPidFile","bind","unlink","notThrowsAsync","access","F_OK","is","parseInt","readFile","deletePidFile","worker","resolve","end","throwsAsync","uncaughtException","maximumDuration","pollInterval","when","existsPidFile"],"mappings":"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","sourcesContent":["import FileSystem from 'fs-extra'\n// import { LoggedClient } from '@virtualpatterns/mablung-worker/distributable/library/worker-client/logged-client.js'\nimport Test from 'ava'\nimport { WorkerClient } from '@virtualpatterns/mablung-worker'\n\nimport { Process, ProcessArgumentError } from '../../index.js'\n\nconst Require = __require\n\nTest.before(async (test) => {\n  test.context.basePath = 'process/pid/create-pid-file'\n  await FileSystem.ensureDir(test.context.basePath)\n})\n\nTest.serial('Process.createPidFile(path) when path exists and is valid', async (test) => {\n\n  let path = `${test.context.basePath}/exists-valid.pid`\n\n  await FileSystem.writeFile(path, process.pid, { 'encoding': 'utf-8' })\n\n  try {\n    test.throws(Process.createPidFile.bind(Process, path), { 'instanceOf': ProcessArgumentError })\n  } finally {\n    await FileSystem.unlink(path)\n  }\n\n})\n\nTest.serial('Process.createPidFile(path) when path does not exist', async (test) => {\n\n  let path = `${test.context.basePath}/not-exists.pid`\n\n  Process.createPidFile(path)\n\n  try {\n    await test.notThrowsAsync(FileSystem.access.bind(FileSystem, path, FileSystem.F_OK))\n    test.is(parseInt(await FileSystem.readFile(path, { 'encoding': 'utf-8' })), process.pid)\n  } finally {\n    Process.deletePidFile()\n  }\n\n})\n\nTest.serial('Process.createPidFile(path) when path exists and is invalid', async (test) => {\n\n  let path = `${test.context.basePath}/exists-invalid.pid`\n\n  await FileSystem.writeFile(path, 100000, { 'encoding': 'utf-8' })\n\n  Process.createPidFile(path)\n\n  try {\n    await test.notThrowsAsync(FileSystem.access.bind(FileSystem, path, FileSystem.F_OK))\n    test.is(parseInt(await FileSystem.readFile(path, { 'encoding': 'utf-8' })), process.pid)\n  } finally {\n    Process.deletePidFile()\n  }\n\n})\n\nTest.serial('Process.createPidFile(path) when called twice', (test) => {\n\n  let path = `${test.context.basePath}/twice.pid`\n\n  Process.createPidFile(path)\n\n  try {\n    test.throws(Process.createPidFile.bind(Process, path), { 'instanceOf': ProcessArgumentError })\n  } finally {\n    Process.deletePidFile()\n  }\n\n})\n\nTest.serial('Process.createPidFile(path) when using a worker', async (test) => {\n\n  let path = `${test.context.basePath}/worker.pid`\n  let worker = new WorkerClient()\n\n  try {\n\n    await worker.import(Require.resolve('./worker.js'))\n    await worker.createPidFile(path)\n\n    try {\n      await test.notThrowsAsync(FileSystem.access.bind(FileSystem, path, FileSystem.F_OK))\n      test.is(parseInt(await FileSystem.readFile(path, { 'encoding': 'utf-8' })), worker.pid)\n    } finally {\n      await worker.deletePidFile()\n    }\n\n  } finally {\n    await worker.end()\n  }\n\n})\n\nTest.serial('Process.createPidFile(path) on exit', async (test) => {\n\n  let path = `${test.context.basePath}/on-exit.pid`\n  let worker = new WorkerClient()\n\n  try {\n    await worker.import(Require.resolve('./worker.js'))\n    await worker.createPidFile(path)\n  } finally {\n    await worker.end()\n  }\n\n  await test.throwsAsync(FileSystem.access.bind(FileSystem, path, FileSystem.F_OK), { 'code': 'ENOENT' })\n\n})\n\nTest.serial('Process.createPidFile(path) on uncaught exception', async (test) => {\n\n  let path = `${test.context.basePath}/on-uncaught-exception.pid`\n  let worker = new WorkerClient()\n\n  await worker.import(Require.resolve('./worker.js'))\n  await worker.createPidFile(path)\n  await worker.uncaughtException()\n\n  let maximumDuration = 2000\n  let pollInterval = maximumDuration / 8\n\n  await test.notThrowsAsync(Process.when(maximumDuration, pollInterval, () => !Process.existsPidFile(path)))\n\n})\n"],"file":"process.create-pid-file.test.js"}