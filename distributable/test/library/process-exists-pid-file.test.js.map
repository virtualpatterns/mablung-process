{"version":3,"sources":["../../../source/test/library/process-exists-pid-file.test.js"],"names":["FileSystem","Test","WorkerClient","Process","Require","_createRequire","import","meta","url","before","test","context","basePath","path","ensureDir","writeFile","process","pid","toString","true","existsPidFile","unlink","false","pathExists","worker","resolve","module","exit"],"mappings":";AAAA,OAAOA,UAAP,MAAuB,UAAvB;AACA,OAAOC,IAAP,MAAiB,KAAjB;AACA,SAASC,YAAT,QAA6B,iCAA7B;AAEA,SAASC,OAAT,QAAwB,gBAAxB;;AAEA,MAAMC,OAAO,GANbC,cAAc,CAACC,MAAM,CAACC,IAAP,CAAYC,GAAb,CAMd;;AAEAP,IAAI,CAACQ,MAAL,CAAaC,IAAD,IAAU;AACpBA,EAAAA,IAAI,CAACC,OAAL,CAAaC,QAAb,GAAwB,6BAAxB;AACD,CAFD;AAIAX,IAAI,CAAC,2DAAD,EAA8D,MAAOS,IAAP,IAAgB;AAEhF,MAAIG,IAAI,GAAI,GAAEH,IAAI,CAACC,OAAL,CAAaC,QAAS,mBAApC;AAEA,QAAMZ,UAAU,CAACc,SAAX,CAAqBJ,IAAI,CAACC,OAAL,CAAaC,QAAlC,CAAN;AACA,QAAMZ,UAAU,CAACe,SAAX,CAAqBF,IAArB,EAA2BG,OAAO,CAACC,GAAR,CAAYC,QAAZ,EAA3B,EAAmD;AAAE,gBAAY;AAAd,GAAnD,CAAN;;AAEA,MAAI;AACFR,IAAAA,IAAI,CAACS,IAAL,CAAUhB,OAAO,CAACiB,aAAR,CAAsBP,IAAtB,CAAV;AACD,GAFD,SAEU;AACR,UAAMb,UAAU,CAACqB,MAAX,CAAkBR,IAAlB,CAAN;AACD;AAEF,CAbG,CAAJ;AAeAZ,IAAI,CAAC,sDAAD,EAA0DS,IAAD,IAAU;AACrE,MAAIG,IAAI,GAAI,GAAEH,IAAI,CAACC,OAAL,CAAaC,QAAS,iBAApC;AACAF,EAAAA,IAAI,CAACY,KAAL,CAAWnB,OAAO,CAACiB,aAAR,CAAsBP,IAAtB,CAAX;AACD,CAHG,CAAJ;AAKAZ,IAAI,CAAC,6DAAD,EAAgE,MAAOS,IAAP,IAAgB;AAElF,MAAIG,IAAI,GAAI,GAAEH,IAAI,CAACC,OAAL,CAAaC,QAAS,qBAApC;AAEA,QAAMZ,UAAU,CAACc,SAAX,CAAqBJ,IAAI,CAACC,OAAL,CAAaC,QAAlC,CAAN;AACA,QAAMZ,UAAU,CAACe,SAAX,CAAqBF,IAArB,EAA2B,QAA3B,EAAqC;AAAE,gBAAY;AAAd,GAArC,CAAN;AAEAH,EAAAA,IAAI,CAACY,KAAL,CAAWnB,OAAO,CAACiB,aAAR,CAAsBP,IAAtB,CAAX;AACAH,EAAAA,IAAI,CAACY,KAAL,CAAW,MAAMtB,UAAU,CAACuB,UAAX,CAAsBV,IAAtB,CAAjB;AAED,CAVG,CAAJ;AAYAZ,IAAI,CAAC,iDAAD,EAAoD,MAAOS,IAAP,IAAgB;AAEtE,MAAIG,IAAI,GAAI,GAAEH,IAAI,CAACC,OAAL,CAAaC,QAAS,aAApC;AACA,MAAIY,MAAM,GAAG,IAAItB,YAAJ,CAAiBE,OAAO,CAACqB,OAAR,CAAgB,aAAhB,CAAjB,CAAb;;AAEA,MAAI;AAEF,UAAMzB,UAAU,CAACc,SAAX,CAAqBJ,IAAI,CAACC,OAAL,CAAaC,QAAlC,CAAN;AACA,UAAMZ,UAAU,CAACe,SAAX,CAAqBF,IAArB,EAA2BW,MAAM,CAACP,GAAP,CAAWC,QAAX,EAA3B,EAAkD;AAAE,kBAAY;AAAd,KAAlD,CAAN;;AAEA,QAAI;AACFR,MAAAA,IAAI,CAACS,IAAL,CAAU,MAAMK,MAAM,CAACE,MAAP,CAAcN,aAAd,CAA4BP,IAA5B,CAAhB;AACD,KAFD,SAEU;AACR,YAAMb,UAAU,CAACqB,MAAX,CAAkBR,IAAlB,CAAN;AACD;AAEF,GAXD,SAWU;AACR,UAAMW,MAAM,CAACG,IAAP,EAAN;AACD;AAEF,CApBG,CAAJ","sourcesContent":["import FileSystem from 'fs-extra'\nimport Test from 'ava'\nimport { WorkerClient } from '@virtualpatterns/mablung-worker'\n\nimport { Process } from '../../index.js'\n\nconst Require = __require\n\nTest.before((test) => {\n  test.context.basePath = 'process/pid/exists-pid-file'\n})\n\nTest('Process.existsPidFile(path) when path exists and is valid', async (test) => {\n\n  let path = `${test.context.basePath}/exists-valid.pid`\n\n  await FileSystem.ensureDir(test.context.basePath)\n  await FileSystem.writeFile(path, process.pid.toString(), { 'encoding': 'utf-8' })\n\n  try {\n    test.true(Process.existsPidFile(path))\n  } finally {\n    await FileSystem.unlink(path)\n  }\n\n})\n\nTest('Process.existsPidFile(path) when path does not exist', (test) => {\n  let path = `${test.context.basePath}/not-exists.pid`\n  test.false(Process.existsPidFile(path))\n})\n\nTest('Process.existsPidFile(path) when path exists and is invalid', async (test) => {\n\n  let path = `${test.context.basePath}/exists-invalid.pid`\n\n  await FileSystem.ensureDir(test.context.basePath)\n  await FileSystem.writeFile(path, '100000', { 'encoding': 'utf-8' })\n\n  test.false(Process.existsPidFile(path))\n  test.false(await FileSystem.pathExists(path))\n\n})\n\nTest('Process.existsPidFile(path) when using a worker', async (test) => {\n\n  let path = `${test.context.basePath}/worker.pid`\n  let worker = new WorkerClient(Require.resolve('./worker.js'))\n\n  try {\n\n    await FileSystem.ensureDir(test.context.basePath)\n    await FileSystem.writeFile(path, worker.pid.toString(), { 'encoding': 'utf-8' })\n\n    try {\n      test.true(await worker.module.existsPidFile(path))\n    } finally {\n      await FileSystem.unlink(path)\n    }\n  \n  } finally {\n    await worker.exit()\n  }\n\n})\n"],"file":"process-exists-pid-file.test.js"}