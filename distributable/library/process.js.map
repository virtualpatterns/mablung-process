{"version":3,"sources":["../../source/library/process.js"],"names":["FileSystem","Is","DurationExceededProcessError","OptionNotSupportedProcessError","PidFileExistsProcessError","PidFileNotExistsProcessError","Process","wait","duration","Promise","resolve","setTimeout","when","maximumDuration","pollInterval","pollFn","reject","waitLoop","start","Date","value","then","catch","error","existsPidFile","path","pathExistsSync","kill","readFileSync","removeSync","createPidFile","handleExit","handleKillSignal","windows","_pidPath","writeFileSync","process","pid","toString","_attach","_pidOption","on","_onEvent","exit","code","deletePidFile","console","forEach","signal","count","listenerCount","log","_detach","option","off","signalPidFile","killPidFile","killSignal","Object","setPrototypeOf"],"mappings":"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","sourcesContent":["import FileSystem from 'fs-extra'\nimport { Is } from '@virtualpatterns/mablung-is'\n\nimport { DurationExceededProcessError } from './error/duration-exceeded-process-error.js'\nimport { OptionNotSupportedProcessError } from './error/option-not-supported-process-error.js'\nimport { PidFileExistsProcessError } from './error/pid-file-exists-process-error.js'\nimport { PidFileNotExistsProcessError } from './error/pid-file-not-exists-process-error.js'\n\nclass Process {\n\n  static wait(duration) {\n    return new Promise((resolve) => {\n      setTimeout(resolve, duration)\n    })\n  }\n\n  static when(maximumDuration, pollInterval, pollFn) {\n\n    return new Promise((resolve, reject) => {\n  \n      let waitLoop = function (start) {\n  \n        let duration = new Date() - start\n        let value = null\n        \n        try {\n  \n          value = pollFn()\n  \n          if (value instanceof Promise) {\n  \n            value\n              .then((value) => {\n    \n                if (!value && duration < maximumDuration) {\n                  setTimeout(() => waitLoop(start), pollInterval)\n                } else if (!value && duration >= maximumDuration) {\n                  reject(new DurationExceededProcessError(duration, maximumDuration))\n                } else {\n                  resolve(value)\n                }\n    \n              })\n              .catch((error) => {\n    \n                if (duration < maximumDuration) {\n                  setTimeout(() => waitLoop(start), pollInterval)\n                } else if (duration >= maximumDuration) {\n                  reject(error)\n                }\n    \n              })\n    \n          } else {\n    \n            if (!value && duration < maximumDuration) {\n              setTimeout(() => waitLoop(start), pollInterval)\n            } else if (!value && duration >= maximumDuration) {\n              reject(new DurationExceededProcessError(duration, maximumDuration))\n            } else {\n              resolve(value)\n            }\n    \n          }\n    \n        } catch (error) {\n  \n          if (duration < maximumDuration) {\n            setTimeout(() => waitLoop(start), pollInterval)\n          } else if (duration >= maximumDuration) {\n            reject(error)\n          }\n  \n        }\n  \n      }\n  \n      waitLoop(new Date())\n  \n    })\n  \n  }\n    \n  static existsPidFile(path) {\n\n    if (FileSystem.pathExistsSync(path)) {\n\n      try {\n        this.kill(FileSystem.readFileSync(path, { 'encoding': 'utf-8' }), 0)\n        return true\n      } catch (error) {\n        FileSystem.removeSync(path)\n        return false\n      }\n\n    } else {\n      return false\n    }\n  \n  }\n  \n  static createPidFile(path, { handleExit = true, handleKillSignal = Is.windows() ? false : [ 'SIGINT', 'SIGTERM' ] } = {}) {\n\n    if (this._pidPath) {\n      throw new PidFileExistsProcessError(this._pidPath)\n    } else if (this.existsPidFile(path)) {\n      throw new PidFileExistsProcessError(path)\n    } else {\n  \n      FileSystem.writeFileSync(path, process.pid.toString(), { 'encoding': 'utf-8' })\n\n      try {\n\n        this._attach({ handleExit, handleKillSignal })\n    \n        this._pidPath = path\n        this._pidOption = { handleExit, handleKillSignal }\n  \n      } catch (error) {\n        FileSystem.removeSync(path)\n        throw error\n      }\n\n    }\n  \n  }\n\n  static _attach({ handleExit, handleKillSignal }) {\n\n    try {\n\n      if (handleExit) {\n\n        this.on('exit', this._onEvent.exit = (code) => {\n          // console.log(`Process.on('exit', Process._onEvent.exit = (${code}) => { ... })`)\n          \n          try {\n            this.deletePidFile()\n          /* c8 ignore next 3 */\n          } catch (error) {\n            console.error(error)\n          }\n    \n        })\n    \n      }\n  \n      if (handleKillSignal) {\n  \n        if (Is.windows()) {\n          throw new OptionNotSupportedProcessError('handleKillSignal')\n        } else {\n        \n          handleKillSignal.forEach((signal) => {\n            this.on(signal, this._onEvent[signal] = () => {\n              // console.log(`Process.on('${signal}', Process._onEvent.${signal} = () => { ... })`)\n            \n              try {\n\n                this.deletePidFile()\n                // this._exit(signal)\n\n                let count = this.listenerCount(signal)\n\n                /* c8 ignore next 5 */\n                if (count <= 0) {\n                  this.exit()\n                } else {\n                  console.log(`Process.listenerCount('${signal}') returned ${count}`)\n                }\n            \n              /* c8 ignore next 3 */\n              } catch (error) {\n                console.error(error)\n              }\n      \n            })\n          })\n    \n        }\n    \n      }\n\n    } catch (error) {\n      this._detach({ handleExit, handleKillSignal })\n      throw error\n    }\n\n  }\n\n  // static _exit(eventName) {\n\n  //   let count = Process.listenerCount(eventName)\n\n  //   /* c8 ignore next 5 */\n  //   if (count <= 0) {\n  //     Process.exit()\n  //   } else {\n  //     console.log(`Process.listenerCount('${eventName}') returned ${count}`)\n  //   }\n\n  // }\n\n  static deletePidFile() {\n\n    let path = this._pidPath\n    let option = this._pidOption\n  \n    if (this.existsPidFile(path)) {\n  \n      FileSystem.removeSync(path)\n  \n      this._detach(option)\n\n      delete Process._pidPath\n      delete Process._pidOption\n  \n    }\n    else {\n      throw new PidFileNotExistsProcessError(path)\n    }\n  \n  }\n\n  static _detach({ handleExit, handleKillSignal }) {\n\n    if (handleKillSignal) {\n\n      handleKillSignal.forEach((signal) => {\n        if (this._onEvent[signal]) {\n          this.off(signal, this._onEvent[signal])\n          delete this._onEvent[signal]\n        }\n      })\n  \n    }\n\n    if (handleExit) {\n\n      if (this._onEvent.exit) {\n        this.off('exit', this._onEvent.exit)\n        delete this._onEvent.exit\n      }\n  \n    }\n\n  }\n\n  static signalPidFile(path, signal) {\n\n    if (this.existsPidFile(path)) {\n      this.kill(FileSystem.readFileSync(path, { 'encoding': 'utf-8' }), signal)\n    } else {\n      throw new PidFileNotExistsProcessError(path)\n    }\n  \n  }\n  \n  static killPidFile(path, killSignal = 'SIGINT') {\n    return this.signalPidFile(path, killSignal)\n  }\n  \n}\n\nProcess._onEvent = {}\nObject.setPrototypeOf(Process, process)\n\nexport { Process }\n"],"file":"process.js"}